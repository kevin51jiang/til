<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
  <id>https://kevinjiang.ca/til/feed.xml</id>
  <link rel="self" type="application/atom+xml" href="https://kevinjiang.ca/til/feed.xml"/>
  <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/"/>
  <updated>2025-06-14T04:59:12.000+00:00</updated>
  <title>Kevin Jiang / til</title>
  <subtitle>
    Things I've Learned: brief blurbs on miscellaneous matter.
  </subtitle>
  <icon>https://kevinjiang.ca/til/assets/favicon.png</icon>
  <author>
    <name>Kevin Jiang</name>
    <uri>https://kevinjiang.ca</uri>
  </author>
  <rights>© 2025 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  <generator uri="https://github.com/kevin51jiang/til">til</generator>
  <entry>
    <id>
      https://kevinjiang.ca/til/how-to-have-multiple-versions-of-cuda-installed-on-linux/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/how-to-have-multiple-versions-of-cuda-installed-on-linux/"/>
    <published>2025-06-13T20:44:59.000-07:00</published>
    <updated>2025-06-14T04:59:12.000+00:00</updated>
    <title>
      how to have multiple versions of cuda installed on linux
    </title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <category term="cuda"/>
    <content type="html"><![CDATA[<p>
  I originally followed the tutorial here ”<a href="https://notesbyair.github.io/blog/cs/2020-05-26-installing-multiple-versions-of-cuda-cudnn/" target="_blank">https://notesbyair.github.io/blog/cs/2020-05-26-installing-multiple-versions-of-cuda-cudnn/</a>” but that disappeared so I’m writing my own.
</p>
<ul>
  <li>
    <p>
      Archive link is here: <a href="https://web.archive.org/web/20220129002741/https://notesbyair.github.io/blog/cs/2020-05-26-installing-multiple-versions-of-cuda-cudnn/" target="_blank">https://web.archive.org/web/20220129002741/https://notesbyair.github.io/blog/cs/2020-05-26-installing-multiple-versions-of-cuda-cudnn/</a>
    </p>
  </li>
</ul>
<p>
  Differences:
</p>
<ul>
  <li>
    <p>
      we’re installing cuda more than cudnn since I only run ML workflows
    </p>
  </li>
  <li>
    <p>
      the <code>_switch_cuda</code> by itself will list versions installed, and the currently active one. Previously it would be easy to forget which versions were installed.
    </p>
  </li>
</ul>
<p>
  I’m running on Linux Mint so I’m used to the apt world. Unix wizards need not apply.
</p>
<h2 id="steps">
  <a href="#steps" data-anchor>Steps</a>
</h2>
<h3 id="one-time-setup">
  <a href="#one-time-setup" data-anchor>One-time setup</a>
</h3>
<ol start="1">
  <li>
    <p>
      Add the following to your <code>~/.bashrc</code> or <code>~/.zshrc</code>
    </p>
  </li>
</ol>
<pre data-code-block data-lang="bash"><code><span data-line="1"><span style="color:#D32F2F;">function</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">_switch_cuda</span><span style="color:#24292EFF;"> {</span>
</span><span data-line="2"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">if</span><span style="color:#24292EFF;"> [ $# </span><span style="color:#D32F2F;">-eq</span><span style="color:#24292EFF;"> 0 ]</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">then</span>
</span><span data-line="3"><span style="color:#24292EFF;">       </span><span style="color:#6F42C1;">echo</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;Available CUDA versions:&quot;</span>
</span><span data-line="4"><span style="color:#24292EFF;">       find /usr/local -maxdepth 1 -type d -name </span><span style="color:#22863A;">&quot;cuda-*&quot;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">while</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292EFF;"> cuda_dir</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">do</span>
</span><span data-line="5"><span style="color:#24292EFF;">           </span><span style="color:#6F42C1;">echo</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;  ${cuda_dir</span><span style="color:#D32F2F;">##*/</span><span style="color:#22863A;">}&quot;</span>
</span><span data-line="6"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">done</span>
</span><span data-line="7"><span style="color:#24292EFF;">       </span><span style="color:#6F42C1;">echo</span><span style="color:#24292EFF;"> -e </span><span style="color:#22863A;">&quot;\nCurrently active CUDA version:&quot;</span>
</span><span data-line="8"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">if</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">command</span><span style="color:#24292EFF;"> -v nvcc </span><span style="color:#D32F2F;">&gt;</span><span style="color:#24292EFF;">/dev/null </span><span style="color:#D32F2F;">2&gt;&amp;1;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">then</span>
</span><span data-line="9"><span style="color:#24292EFF;">           nvcc --version </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> grep </span><span style="color:#22863A;">&quot;release&quot;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> awk </span><span style="color:#22863A;">'{print $5}'</span>
</span><span data-line="10"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">else</span>
</span><span data-line="11"><span style="color:#24292EFF;">           </span><span style="color:#6F42C1;">echo</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;  No CUDA version currently active (nvcc not found)&quot;</span>
</span><span data-line="12"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">fi</span>
</span><span data-line="13"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">return</span>
</span><span data-line="14"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">fi</span>
</span><span data-line="15">
</span><span data-line="16"><span style="color:#24292EFF;">   v=$1</span>
</span><span data-line="17"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">if</span><span style="color:#24292EFF;"> [ </span><span style="color:#D32F2F;">!</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">-d</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;/usr/local/cuda-$v&quot;</span><span style="color:#24292EFF;"> ]</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">then</span>
</span><span data-line="18"><span style="color:#24292EFF;">       </span><span style="color:#6F42C1;">echo</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;Error: CUDA version $v not found in /usr/local/cuda-$v. Syntax: _switch_cuda MAJOR.MINOR e.g. _switch_cuda 12.1&quot;</span>
</span><span data-line="19"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">return</span><span style="color:#24292EFF;"> 1</span>
</span><span data-line="20"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">fi</span>
</span><span data-line="21">
</span><span data-line="22"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">export</span><span style="color:#24292EFF;"> PATH=$PATH:/usr/local/cuda-$v/bin</span>
</span><span data-line="23"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">export</span><span style="color:#24292EFF;"> CUDADIR=/usr/local/cuda-$v</span>
</span><span data-line="24"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">export</span><span style="color:#24292EFF;"> LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-$v/lib64</span>
</span><span data-line="25">
</span><span data-line="26"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">if</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">command</span><span style="color:#24292EFF;"> -v nvcc </span><span style="color:#D32F2F;">&gt;</span><span style="color:#24292EFF;">/dev/null </span><span style="color:#D32F2F;">2&gt;&amp;1;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">then</span>
</span><span data-line="27"><span style="color:#24292EFF;">       nvcc --version</span>
</span><span data-line="28"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">else</span>
</span><span data-line="29"><span style="color:#24292EFF;">       </span><span style="color:#6F42C1;">echo</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;Error: nvcc not found after switching to CUDA $v&quot;</span>
</span><span data-line="30"><span style="color:#24292EFF;">       </span><span style="color:#D32F2F;">return</span><span style="color:#24292EFF;"> 1</span>
</span><span data-line="31"><span style="color:#24292EFF;">   </span><span style="color:#D32F2F;">fi</span>
</span><span data-line="32"><span style="color:#24292EFF;">}</span>
</span></code></pre>
<h3 id="for-each-cuda-install">
  <a href="#for-each-cuda-install" data-anchor>For each CUDA install…</a>
</h3>
<ol start="1">
  <li>
    <p>
      Download the right runfile from <a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank">Nvidia’s CUDA Toolkit Archive</a>
    </p>
  </li>
  <li>
    <p>
      Select the right architecture for your computer. <em>Make sure to choose the runfile and not the .deb.</em>
    </p>
    <ul>
      <li>
        <p>
          For me, I did Linux &gt; x86_64 &gt; Ubuntu &gt; 22.04 &gt; runfile (local)
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      Use the provided wget command to download the runfile
    </p>
    <ul>
      <li>
        <p>
          e.g. <code>wget https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda_12.1.1_530.30.02_linux.run</code>
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      Install the cuda
    </p>
    <ul>
      <li>
        <p>
          <code>sudo sh cuda_12.1.1_530.30.02_linux.run --silent --toolkit --toolkitpath=/usr/local/cuda-12.1</code>
        </p>
      </li>
    </ul>
  </li>
</ol>
<p>
  Done!
</p>
<p>
  Then before you need to use CUDA, or after you enter your python venv you can just <code>_switch_cuda 12.1</code>.
</p>
<p>
  Alternatively, after you have the runfile URL, you can just paste it in this generator instead of editing the commands yourself.
</p>
<iframe src="https://kevinjiang.ca/install-cuda-script/" width="500" height="600" frameborder="0" style="border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: block; margin: 20px auto;" title="CUDA Installation Command Generator"></iframe>]]></content>
    <rights>© 2025 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/how-to-make-claude-play-pokemon/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/how-to-make-claude-play-pokemon/"/>
    <published>2025-03-31T00:24:49.000-07:00</published>
    <updated>2025-03-31T07:31:57.000+00:00</updated>
    <title>how to make claude play pokemon</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  Today I went to the <a href="http://lu.ma/poke" target="_blank">Claude Plays Pokemon</a> mini hackathon. The goal was to get through the Mt Moon labyrinth, and nobody finished.
</p>
<p>
  Not much was done, but here’s some takeaways:
</p>
<ul>
  <li>
    <p>
      Sonnet 3.7 is very bad at vision for gameboy. Some people experimented with upscaling/coloring in the screenshots. Other people just told Sonnet that it was visually impaired and not to trust what it was seeing.
    </p>
  </li>
  <li>
    <p>
      The idea of playing with the multiverse (trying multiple paths and then only contiuing with the “best”) is pretty interesting and could be effective.
    </p>
  </li>
  <li>
    <p>
      The emulator/memory has it so the border of the map (lines where x=0, y=0) is walkable tiles, but you actually can’t walk there. This is what led to Claude getting stuck for one team.
    </p>
  </li>
</ul>]]></content>
    <rights>© 2025 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/how-to-mount-nfs-shares-in-nfs-containers/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/how-to-mount-nfs-shares-in-nfs-containers/"/>
    <published>2025-03-30T00:17:47.000-07:00</published>
    <updated>2025-03-30T07:20:05.000+00:00</updated>
    <title>how to mount nfs shares in nfs containers</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  Do this in the main proxmox node shell
</p>
<pre data-code-block><code>sudo mount -t nfs4 -o nfsvers=4.2 &lt;your-ip&gt;:/nasnfs /nas</code></pre>
<ul>
  <li>
    <p>
      Here, nasnfs is the name of the NFS resource, and /nas is the mount directory.
    </p>
  </li>
</ul>
<p>
  Then, what you should do is
</p>
<pre data-code-block><code>pct set &lt;lxc-container-id&gt; -mp0 /nas,mp=/mnt/nasnfs
pct set &lt;lxc-container-id&gt; -mp1 /nas2,mp=/mnt/nasnfs2
etc..</code></pre>
<p>
  Source: <a href="https://forum.proxmox.com/threads/tutorial-mounting-nfs-share-to-an-unprivileged-lxc.138506/post-726198" target="_blank">https://forum.proxmox.com/threads/tutorial-mounting-nfs-share-to-an-unprivileged-lxc.138506/post-726198</a>
</p>]]></content>
    <rights>© 2025 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/store-refs-in-zustand-stores/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/store-refs-in-zustand-stores/"/>
    <published>2024-08-19T18:10:11.000-04:00</published>
    <updated>2024-08-19T22:11:30.000+00:00</updated>
    <title>Store Refs in Zustand Stores</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  Use callback refs.
</p>
<p>
  Inside the zustand store:
</p>
<pre data-code-block data-lang="jsx"><code><span data-line="1"><span style="color:#24292EFF;">  settingsContainerRef</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">createRef</span><span style="color:#24292EFF;">() </span><span style="color:#D32F2F;">as</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">MutableRefObject</span><span style="color:#24292EFF;">&lt;</span><span style="color:#6F42C1;">HTMLDivElement</span><span style="color:#24292EFF;">&gt;</span><span style="color:#212121;">,</span>
</span><span data-line="2"><span style="color:#24292EFF;">  setSettingsContainerEl</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> (element</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">HTMLDivElement</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> </span><span style="color:#1976D2;">null</span><span style="color:#24292EFF;">) </span><span style="color:#D32F2F;">=&gt;</span><span style="color:#24292EFF;"> {</span>
</span><span data-line="3"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">if</span><span style="color:#24292EFF;"> (</span><span style="color:#D32F2F;">!</span><span style="color:#24292EFF;">element) {</span>
</span><span data-line="4"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">return</span><span style="color:#24292EFF;">;</span>
</span><span data-line="5"><span style="color:#24292EFF;">    }</span>
</span><span data-line="6"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">const</span><span style="color:#24292EFF;"> </span><span style="color:#1976D2;">newRef</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">=</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">createRef</span><span style="color:#24292EFF;">() </span><span style="color:#D32F2F;">as</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">MutableRefObject</span><span style="color:#24292EFF;">&lt;</span><span style="color:#6F42C1;">HTMLDivElement</span><span style="color:#24292EFF;">&gt;;</span>
</span><span data-line="7"><span style="color:#24292EFF;">    </span><span style="color:#1976D2;">newRef</span><span style="color:#24292EFF;">.current </span><span style="color:#D32F2F;">=</span><span style="color:#24292EFF;"> element;</span>
</span><span data-line="8"><span style="color:#24292EFF;">    </span><span style="color:#6F42C1;">set</span><span style="color:#24292EFF;">({ settingsContainerRef</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> newRef });</span>
</span><span data-line="9"><span style="color:#24292EFF;">  }</span><span style="color:#212121;">,</span>
</span></code></pre>
<p>
  Then in JSX:
</p>
<pre data-code-block><code>    &lt;div
     ref={setSettingsContainerEl}
     ...
     /&gt;</code></pre>
<p>
  Source: <a href="https://github.com/pmndrs/zustand/discussions/1833#discussioncomment-8957558" target="_blank">https://github.com/pmndrs/zustand/discussions/1833#discussioncomment-8957558</a>
</p>]]></content>
    <rights>© 2024 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/how-to-soft-link-a-directory-on-linux/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/how-to-soft-link-a-directory-on-linux/"/>
    <published>2024-08-13T04:41:24.000-04:00</published>
    <updated>2024-08-13T08:42:30.000+00:00</updated>
    <title>How to Soft Link a Directory on Linux</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  Simple command:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">ln -s source_dir redirecting_dir</span>
</span></code></pre>
<p>
  Where <code>source_dir</code> has the files, and <code>redirecting_dir</code> contains the files that will show up.
</p>]]></content>
    <rights>© 2024 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://kevinjiang.ca/til/cuda-issues/</id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/cuda-issues/"/>
    <published>2024-07-23T08:33:43.000-04:00</published>
    <updated>2024-07-23T14:15:59.000+00:00</updated>
    <title>cuda issues</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <category term="cuda"/>
    <content type="html"><![CDATA[<blockquote>
  <p>
    First of all apologies for the rushed writing, but I’m too happy that I finally resolved my CUDA problem after days of trying. Maybe after I calm down a bit I’ll come back to make it more pleasant to read.
  </p>
</blockquote>
<p>
  I’m trying to run Nvidia Docker containers on my Linux Mint 21.3 machine. This solves the <code>Failed to initialize NVML: Unknown Error</code> problem. However, contrary to the other posts about <code>Failed to initialize NVML: Unknown Error</code>, where the GPU goes offline after a certain period of time, my GPU wasn’t detected at all!
</p>
<p>
  CUDA works great on bare metal, but once containerized there’s always a problem of the GPU not being detected in Docker.
</p>
<p>
  For my solution, check the last entry.
</p>
<p>
  But first: neofetch
</p>
<pre data-code-block><code>            ...-:::::-...                 user@computer
          .-MMMMMMMMMMMMMMM-.              ----------------
      .-MMMM`..-:::::::-..`MMMM-.          OS: Linux Mint 21.3 x86_64
    .:MMMM.:MMMMMMMMMMMMMMM:.MMMM:.        Host: MS-7D51 1.0
   -MMM-M---MMMMMMMMMMMMMMMMMMM.MMM-       Kernel: 5.15.0-113-generic
 `:MMM:MM`  :MMMM:....::-...-MMMM:MMM:`    Uptime: 52 mins
 :MMM:MMM`  :MM:`  ``    ``  `:MMM:MMM:    Packages: 3113 (dpkg)
.MMM.MMMM`  :MM.  -MM.  .MM-  `MMMM.MMM.   Shell: zsh 5.8.1
:MMM:MMMM`  :MM.  -MM-  .MM:  `MMMM-MMM:   Resolution: 2560x1440
:MMM:MMMM`  :MM.  -MM-  .MM:  `MMMM:MMM:   DE: Cinnamon 6.0.4
:MMM:MMMM`  :MM.  -MM-  .MM:  `MMMM-MMM:   WM: Mutter (Muffin)
.MMM.MMMM`  :MM:--:MM:--:MM:  `MMMM.MMM.   WM Theme: Mint-Y-Dark-Aqua (Mint-Y)
 :MMM:MMM-  `-MMMMMMMMMMMM-`  -MMM-MMM:    Theme: Mint-Y-Aqua [GTK2/3]
  :MMM:MMM:`                `:MMM:MMM:     Icons: Mint-Y-Sand [GTK2/3]
   .MMM.MMMM:--------------:MMMM.MMM.      Terminal: gnome-terminal
     '-MMMM.-MMMMMMMMMMMMMMM-.MMMM-'       CPU: AMD Ryzen 7 3700X (16) @ 3.600GHz
       '.-MMMM``--:::::--``MMMM-.'         GPU: NVIDIA GeForce RTX 3090
            '-MMMMMMMMMMMMM-'              Memory: 8751MiB / 32004MiB
               ``-:::::-``</code></pre>
<h2 id="what-we-re-trying-to-solve">
  <a href="#what-we-re-trying-to-solve" data-anchor>What we’re trying to solve:</a>
</h2>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">sudo docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi</span>
</span><span data-line="2">
</span><span data-line="3"><span style="color:#D32F2F;">&gt;&gt;</span><span style="color:#24292EFF;"> Failed to initialize NVML: Unknown Error</span>
</span></code></pre>
<p>
  Ideally, we want it to print out an nvidia-smi screen.
</p>
<h2 id="my-troubleshooting-steps">
  <a href="#my-troubleshooting-steps" data-anchor>My troubleshooting steps:</a>
</h2>
<h3 id="cgroupfs">
  <a href="#cgroupfs" data-anchor>Cgroupfs:</a>
</h3>
<ul>
  <li>
    <p>
      this is probably not a problem anymore (fixed), but might as well do it because anything to do with CUDA is black magic
    </p>
  </li>
  <li>
    <p>
      Relevant Links:
    </p>
    <ul>
      <li>
        <p>
          <a href="https://github.com/NVIDIA/nvidia-docker/issues/1730#issue-1573551271" target="_blank">https://github.com/NVIDIA/nvidia-docker/issues/1730#issue-1573551271</a>
        </p>
      </li>
      <li>
        <p>
          <a href="https://github.com/NVIDIA/nvidia-docker/issues/1671#issuecomment-1740502744" target="_blank">https://github.com/NVIDIA/nvidia-docker/issues/1671#issuecomment-1740502744</a>
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      tl;dr
    </p>
  </li>
</ul>
<p>
  Set <code>/etc/docker/daemon.json</code> to
</p>
<pre data-code-block data-lang="json"><code><span data-line="1"><span style="color:#24292EFF;">{</span>
</span><span data-line="2"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">&quot;default-runtime&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;nvidia&quot;</span><span style="color:#212121;">,</span>
</span><span data-line="3"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">&quot;runtimes&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> {</span>
</span><span data-line="4"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">&quot;nvidia&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> {</span>
</span><span data-line="5"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">&quot;args&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> []</span><span style="color:#212121;">,</span>
</span><span data-line="6"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">&quot;path&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;nvidia-container-runtime&quot;</span>
</span><span data-line="7"><span style="color:#24292EFF;">    }</span>
</span><span data-line="8"><span style="color:#24292EFF;">  }</span><span style="color:#212121;">,</span>
</span><span data-line="9"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">&quot;exec-opts&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> [</span><span style="color:#22863A;">&quot;native.cgroupdriver=cgroupfs&quot;</span><span style="color:#24292EFF;">]</span>
</span><span data-line="10"><span style="color:#24292EFF;">}</span>
</span></code></pre>
<h3 id="passing-in-the-devices-in-docker-compose">
  <a href="#passing-in-the-devices-in-docker-compose" data-anchor>Passing in the devices, in docker compose</a>
</h3>
<ul>
  <li>
    <p>
      Relevant Links:
    </p>
    <ul>
      <li>
        <p>
          <a href="https://github.com/AbdBarho/stable-diffusion-webui-docker/issues/389#issuecomment-1571340508" target="_blank">https://github.com/AbdBarho/stable-diffusion-webui-docker/issues/389#issuecomment-1571340508</a>
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      tl;dr
    </p>
  </li>
</ul>
<p>
  Add the following to your <code>docker-compose.yaml</code>, under a service:
</p>
<pre data-code-block data-lang="yaml"><code><span data-line="1"><span style="color:#D32F2F;">service</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">ServiceName</span>
</span><span data-line="2"><span style="color:#24292EFF;">  </span><span style="color:#C2C3C5;"># ...</span>
</span><span data-line="3"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">deploy</span><span style="color:#D32F2F;">:</span>
</span><span data-line="4"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">resources</span><span style="color:#D32F2F;">:</span>
</span><span data-line="5"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">reservations</span><span style="color:#D32F2F;">:</span>
</span><span data-line="6"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">devices</span><span style="color:#D32F2F;">:</span>
</span><span data-line="7"><span style="color:#24292EFF;">            - </span><span style="color:#D32F2F;">driver</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">nvidia</span>
</span><span data-line="8"><span style="color:#24292EFF;">              </span><span style="color:#D32F2F;">capabilities</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> [</span><span style="color:#22863A;">&quot;gpu&quot;</span><span style="color:#212121;">,</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;compute&quot;</span><span style="color:#212121;">,</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;utility&quot;</span><span style="color:#24292EFF;">]</span>
</span><span data-line="9"><span style="color:#24292EFF;">              </span><span style="color:#C2C3C5;"># &quot;gpu&quot; may or may not be present depending on the video card</span>
</span></code></pre>
<h3 id="pass-in-the-gpu-using-gpus-all">
  <a href="#pass-in-the-gpu-using-gpus-all" data-anchor>Pass in the GPU using —gpus all</a>
</h3>
<ul>
  <li>
    <p>
      When you run something in Docker, tack on <code>--gpus all</code>
    </p>
  </li>
</ul>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">sudo docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi</span>
</span><span data-line="2">
</span><span data-line="3"><span style="color:#D32F2F;">&gt;&gt;</span><span style="color:#24292EFF;"> Failed to initialize NVML: Unknown Error</span>
</span></code></pre>
<p>
  …drat no change
</p>
<h3 id="passing-in-devices-(my-problem)">
  <a href="#passing-in-devices-(my-problem)" data-anchor>Passing in Devices (my problem):</a>
</h3>
<ul>
  <li>
    <p>
      My problem:
    </p>
    <ul>
      <li>
        <p>
          For some reason, the symlinks for all the different devices aren’t made
        </p>
      </li>
      <li>
        <p>
          Had to add all the <code>--device=/dev/nvidia-uvm-tools --device=/dev/nvidia-modeset --device=/dev/nvidiactl --device=/dev/nvidia0</code>, otherwise it wouldn’t be detected
        </p>
      </li>
      <li>
        <p>
          Next up is to try
        </p>
      </li>
    </ul>
  </li>
</ul>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">sudo nvidia-ctk system create-dev-char-symlinks \</span>
</span><span data-line="2"><span style="color:#24292EFF;">    --create-all</span>
</span></code></pre>
<ul>
  <li>
    <p>
      Test if you have this problem:
    </p>
  </li>
  <li>
    <p>
      <code>sudo docker run --rm --runtime=nvidia --gpus all --device=/dev/nvidia-uvm-tools --device=/dev/nvidia-modeset --device=/dev/nvidiactl --device=/dev/nvidia0 ubuntu nvidia-smi</code>
    </p>
  </li>
  <li>
    <p>
      I only needed to add <code>--device=/dev/nvidiactl --device=/dev/nvidia0</code>, but ymmv
    </p>
  </li>
  <li>
    <p>
      It works~
    </p>
  </li>
</ul>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">sudo docker run --rm --runtime=nvidia --gpus all --device=/dev/nvidia-uvm-tools --device=/dev/nvidia-modeset --device=/dev/nvidiactl --device=/dev/nvidia0  ubuntu nvidia-smi</span>
</span><span data-line="2">
</span><span data-line="3"><span style="color:#D32F2F;">&gt;&gt;</span>
</span><span data-line="4">
</span><span data-line="5"><span style="color:#24292EFF;">Tue Jul 23 14:08:38 2024</span>
</span><span data-line="6"><span style="color:#24292EFF;">+---------------------------------------------------------------------------------------+</span>
</span><span data-line="7"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> NVIDIA-SMI 535.183.01             Driver Version: 535.183.01   CUDA Version: 12.2     </span><span style="color:#D32F2F;">|</span>
</span><span data-line="8"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">-----------------------------------------+----------------------+----------------------+</span>
</span><span data-line="9"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> GPU  Name                 Persistence-M </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> Bus-Id        Disp.A </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> Volatile Uncorr. ECC </span><span style="color:#D32F2F;">|</span>
</span><span data-line="10"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> Fan  Temp   Perf          Pwr:Usage/Cap </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">         Memory-Usage </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> GPU-Util  Compute M. </span><span style="color:#D32F2F;">|</span>
</span><span data-line="11"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">                                         </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">                      </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">               MIG M. </span><span style="color:#D32F2F;">|</span>
</span><span data-line="12"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">=========================================+======================+======================</span><span style="color:#D32F2F;">|</span>
</span><span data-line="13"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">   0  NVIDIA GeForce RTX 3090        Off </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> 00000000:2D:00.0  On </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">                  N/A </span><span style="color:#D32F2F;">|</span>
</span><span data-line="14"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> 36%   34C    P2             106W / 350W </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">    587MiB / 24576MiB </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">      0%      Default </span><span style="color:#D32F2F;">|</span>
</span><span data-line="15"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">                                         </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">                      </span><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">                  N/A </span><span style="color:#D32F2F;">|</span>
</span><span data-line="16"><span style="color:#24292EFF;">+-----------------------------------------+----------------------+----------------------+</span>
</span><span data-line="17">
</span><span data-line="18"><span style="color:#24292EFF;">+---------------------------------------------------------------------------------------+</span>
</span><span data-line="19"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;"> Processes:                                                                            </span><span style="color:#D32F2F;">|</span>
</span><span data-line="20"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">  GPU   GI   CI        PID   Type   Process name                            GPU Memory </span><span style="color:#D32F2F;">|</span>
</span><span data-line="21"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">        ID   ID                                                             Usage      </span><span style="color:#D32F2F;">|</span>
</span><span data-line="22"><span style="color:#D32F2F;">|</span><span style="color:#24292EFF;">=======================================================================================</span><span style="color:#D32F2F;">|</span>
</span><span data-line="23"><span style="color:#24292EFF;">+---------------------------------------------------------------------------------------+</span>
</span></code></pre>
<ul>
  <li>
    <p>
      Relevant links:
    </p>
    <ul>
      <li>
        <p>
          <a href="https://github.com/NVIDIA/nvidia-docker/issues/1730#issue-1573551271" target="_blank">https://github.com/NVIDIA/nvidia-docker/issues/1730#issue-1573551271</a> (used the repro steps here to finally figure out that the GPU was indeed getting detected)
        </p>
      </li>
    </ul>
  </li>
</ul>]]></content>
    <rights>© 2024 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/on-solving-non-linear-programming-problems/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/on-solving-non-linear-programming-problems/"/>
    <published>2024-01-16T16:48:25.000-05:00</published>
    <updated>2024-01-16T21:49:17.000+00:00</updated>
    <title>on solving non-linear programming problems</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <category term="optimization"/>
    <content type="html"><![CDATA[<p>
  Given 2 valid models, A and B, for a non-LP problem, and you want to minimize solution time:
</p>
<ul>
  <li>
    <p>
      Each model has an integer space flesh, (convex hull) which is searched through with Branch &amp; Bound
    </p>
  </li>
  <li>
    <p>
      Each model also has a “crust”, which is what happens when you relax the constraints to become an LP.
    </p>
    <ul>
      <li>
        <p>
          Let’s call it A_lp, B_lp
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      The crust is useless search space that takes up time in the branch and bound, therefore we should try to minimize it. However, solving linear programming is easy.
    </p>
  </li>
  <li>
    <p>
      You can minimize it by:
    </p>
    <ul>
      <li>
        <p>
          Proving A_lp is a subset of B_lp, then choose (A) as your model
        </p>
      </li>
      <li>
        <p>
          Proving B_lp is a subset of A_lp, then choose (B) as your model
        </p>
      </li>
      <li>
        <p>
          If neither of these are the case, then choose (A intersect B) as your model
        </p>
      </li>
    </ul>
  </li>
</ul>]]></content>
    <rights>© 2024 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/how-to-parallelize-a-script-in-bash/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/how-to-parallelize-a-script-in-bash/"/>
    <published>2024-01-08T11:22:01.000-05:00</published>
    <updated>2024-01-08T16:26:02.000+00:00</updated>
    <title>How to Parallelize a Script in Bash</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  For running <code>scriptName.sh</code>, while passing in option of an index of <code>arrayThatVaries</code>:
</p>
<pre data-code-block data-lang="bash"><code><span data-line="1"><span style="color:#24292EFF;">arrayThatVaries=(</span>
</span><span data-line="2"><span style="color:#24292EFF;">  </span><span style="color:#22863A;">&quot;entry1&quot;</span>
</span><span data-line="3"><span style="color:#24292EFF;">  </span><span style="color:#22863A;">&quot;entry2&quot;</span>
</span><span data-line="4"><span style="color:#24292EFF;">  </span><span style="color:#22863A;">&quot;entry3&quot;</span>
</span><span data-line="5"><span style="color:#24292EFF;">)</span>
</span><span data-line="6">
</span><span data-line="7">
</span><span data-line="8"><span style="color:#24292EFF;">(trap </span><span style="color:#22863A;">'kill 0'</span><span style="color:#24292EFF;"> SIGINT</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">for</span><span style="color:#24292EFF;"> i </span><span style="color:#D32F2F;">in</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;${</span><span style="color:#D32F2F;">!</span><span style="color:#22863A;">arrayThatVaries[@]}&quot;</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">do</span>
</span><span data-line="9"><span style="color:#24292EFF;">  scriptName.sh --option </span><span style="color:#22863A;">&quot;${arrayThatVaries[$i]}&quot;</span><span style="color:#24292EFF;"> --index </span><span style="color:#22863A;">&quot;$i&quot;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&amp;</span>
</span><span data-line="10"><span style="color:#D32F2F;">done</span>
</span><span data-line="11"><span style="color:#24292EFF;">wait)</span>
</span></code></pre>]]></content>
    <rights>© 2024 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/building-postgres-on-mac/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/building-postgres-on-mac/"/>
    <published>2024-01-01T09:22:36.000-05:00</published>
    <updated>2024-01-01T14:30:55.000+00:00</updated>
    <title>Building Postgres on Mac</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  While trying to install Postgres today, I thought it’d be fun to try 16.1 for the fun of it.
</p>
<p>
  I ran the command with asdf as <code>asdf install postgres 16.1</code>
</p>
<p>
  Turns out, Postgres updated things in update 16 (building with ic4uc by default now) and I kept getting this error:
</p>
<pre data-code-block><code>checking for icu-uc icu-i18n... no
configure: error: ICU library not found
If you have ICU already installed, see config.log for details on the
failure.  It is possible the compiler isn't looking in the proper directory.
Use --without-icu to disable ICU support.</code></pre>
<p>
  I found an article describing <em>this exact issue</em> on someone’s blog at <a href="https://viggy28.dev/article/postgres-v16-icu-installation-issue/" target="_blank">https://viggy28.dev/article/postgres-v16-icu-installation-issue/</a>
</p>
<p>
  The solution was to run this following block instead:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#D32F2F;">export</span><span style="color:#24292EFF;"> PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig/</span>
</span><span data-line="2"><span style="color:#24292EFF;">asdf install postgres 16.1</span>
</span></code></pre>
<p>
  Thanks a bunch Vignesh! It saved me a ton of time. I wonder if this would be what it felt like to use Stack Overflow 10 years ago.
</p>]]></content>
    <rights>© 2024 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/interesting-rails-conventions/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/interesting-rails-conventions/"/>
    <published>2023-12-01T12:06:08.000-05:00</published>
    <updated>2023-12-01T17:52:01.000+00:00</updated>
    <title>Interesting Rails Conventions</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <category term="rails"/>
    <content type="html"><![CDATA[<p>
  As a noob in programming in Ruby on Rails, I feel like there’s a lot to learn. Unfortunately Intellisense doesn’t work great leading to harder discoverability. Convention over configuration is great, but only if you already know that convention. Here’s some miscellaneous things that I found interesting while reading the Ruby on Rails guides (for v7.1.2).
</p>
<p>
  Disclaimer: I’m still very new to this, so if anything here is wrong please let me know!
</p>
<h2 id="notes">
  <a href="#notes" data-anchor>Notes:</a>
</h2>
<ul>
  <li>
    <p>
      In regex, use <code>\A</code> and <code>\z</code> to indicate the start and end of the string. <a href="#fn:a" id="fn:a.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>
    </p>
  </li>
  <li>
    <p>
      <code>has_many :books, dependent: :destroy</code> <a href="#fn:b" id="fn:b.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>
    </p>
  </li>
  <li>
    <p>
      Use <code>has_and_belongs_to_many</code> to build an implicit join table easily, otherwise <code>has_many :through</code>
    </p>
  </li>
  <li>
    <p>
      Symbol vs String: Use Symbol when the identity of it matters, use String when contents matter
    </p>
  </li>
  <li>
    <p>
      <code>-&gt; { method }</code> or <code>-&gt;(args) { method(args)}</code> is a lambda
    </p>
  </li>
  <li>
    <p>
      Metaprogramming makes things confusing. As a beginner, try not to touch it if possible (and to keep code readable).
    </p>
  </li>
  <li>
    <p>
      ActiveJob is really cool
    </p>
  </li>
  <li>
    <p>
      You can use <code>&lt;%= method %&gt;</code> erb-style interpolation in YAML files, somehow. I should figure out how.
    </p>
  </li>
  <li>
    <p>
      An ActiveStorage “file” is called an attachment
    </p>
  </li>
  <li>
    <p>
      You should periodically purge unattached uploads <a href="#fn:c" id="fn:c.ref" data-footnote-ref aria-label="note"><sup>3</sup></a>
    </p>
  </li>
</ul>
<h2 id="full-text">
  <a href="#full-text" data-anchor>Full text:</a>
</h2>
<pre data-code-block data-lang="rb"><code><span data-line="1"><span style="color:#D32F2F;">class</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">Author</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&lt;</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">ApplicationRecord</span>
</span><span data-line="2"><span style="color:#24292EFF;">  has_many :books</span><span style="color:#212121;">,</span><span style="color:#24292EFF;"> dependent: :destroy</span>
</span><span data-line="3"><span style="color:#D32F2F;">end</span>
</span><span data-line="4">
</span><span data-line="5"><span style="color:#D32F2F;">class</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">Book</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&lt;</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">ApplicationRecord</span>
</span><span data-line="6"><span style="color:#24292EFF;">  belongs_to :author</span>
</span><span data-line="7"><span style="color:#D32F2F;">end</span>
</span><span data-line="8">
</span></code></pre><pre data-code-block data-lang="rb"><code><span data-line="1"><span style="color:#24292EFF;">namespace :active_storage </span><span style="color:#D32F2F;">do</span>
</span><span data-line="2"><span style="color:#24292EFF;">  desc </span><span style="color:#22863A;">&quot;Purges unattached Active Storage blobs. Run regularly.&quot;</span>
</span><span data-line="3"><span style="color:#24292EFF;">  task purge_unattached: :environment </span><span style="color:#D32F2F;">do</span>
</span><span data-line="4"><span style="color:#24292EFF;">    </span><span style="color:#1976D2;">ActiveStorage</span><span style="color:#212121;">::</span><span style="color:#1976D2;">Blob</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">unattached</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">where(created_at: </span><span style="color:#212121;">..</span><span style="color:#1976D2;">2</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">days</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">ago)</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">find_each(</span><span style="color:#D32F2F;">&amp;</span><span style="color:#24292EFF;">:purge_later)</span>
</span><span data-line="5"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">end</span>
</span><span data-line="6"><span style="color:#D32F2F;">end</span>
</span></code></pre>
<p>
  The query generated by ActiveStorage::Blob.unattached can be slow and potentially disruptive on applications with larger databases.
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn:a">
      <p>
        use <code>\A</code> and <code>\z</code> to match the start and end of the string, <code>^</code> and <code>$</code> match the start/end of a line. Due to frequent misuse of <code>^</code> and <code>$</code>, you need to pass the multiline: true option in case you use any of these two anchors in the provided regular expression. In most cases, you should be using <code>\A</code> and <code>\z</code>.
      </p>
      <a href="#fn:a.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn:b">
      <a href="#fn:b.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn:c">
      <a href="#fn:c.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2023 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://kevinjiang.ca/til/docker-compose/</id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/docker-compose/"/>
    <published>2023-11-30T09:14:26.000-05:00</published>
    <updated>2023-11-30T14:18:13.000+00:00</updated>
    <title>docker compose</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <category term="docker"/>
    <content type="html"><![CDATA[<p>
  This past Black Friday (~4 days ago), I went on a shopping spree and bought… servers. Plain old servers. Being that most of my experience is Jamstack/serverless/Static Hosting, I thought it’d be interesting to self host some of the stuff myself.
</p>
<p>
  While I am working on a Ruby on Rails project right now, I’ve been trying to make sure the stuff <em>around</em> the product are useful and present as well (monitoring, logs, etc.)
</p>
<p>
  So, I spent the past few hours playing with Uptime Kuma, and found a way to host multiple instances on the same IP address, all within a Docker Compose. Here’s the yaml. Hopefully someone finds this useful!
</p>
<pre data-code-block data-lang="yaml"><code><span data-line="1"><span style="color:#C2C3C5;"># https://github.com/SteveLTN/https-portal</span>
</span><span data-line="2"><span style="color:#C2C3C5;"># https://github.com/louislam/uptime-kuma/wiki/Reverse-Proxy</span>
</span><span data-line="3">
</span><span data-line="4"><span style="color:#D32F2F;">version</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;3.3&quot;</span>
</span><span data-line="5">
</span><span data-line="6"><span style="color:#D32F2F;">services</span><span style="color:#D32F2F;">:</span>
</span><span data-line="7"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">https-portal</span><span style="color:#D32F2F;">:</span>
</span><span data-line="8"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">image</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">steveltn/https-portal:1</span>
</span><span data-line="9"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">ports</span><span style="color:#D32F2F;">:</span>
</span><span data-line="10"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">&quot;80:80&quot;</span>
</span><span data-line="11"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">&quot;443:443&quot;</span>
</span><span data-line="12"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">links</span><span style="color:#D32F2F;">:</span>
</span><span data-line="13"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">uptime-kuma-kevinjiang-ca</span>
</span><span data-line="14"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">uptime-kuma-k-j-ca</span>
</span><span data-line="15"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">restart</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">always</span>
</span><span data-line="16"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">environment</span><span style="color:#D32F2F;">:</span>
</span><span data-line="17"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">DOMAINS</span><span style="color:#D32F2F;">:</span>
</span><span data-line="18"><span style="color:#24292EFF;">        </span><span style="color:#22863A;">&quot;status.kevinjiang.ca -&gt; http://uptime-kuma-kevinjiang-ca:3001,</span>
</span><span data-line="19"><span style="color:#22863A;">        status.k-j.ca -&gt; http://uptime-kuma-k-j-ca:3002&quot;</span>
</span><span data-line="20"><span style="color:#24292EFF;">      </span><span style="color:#C2C3C5;"># STAGE: 'production' # Don't use production until staging works</span>
</span><span data-line="21"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">STAGE</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;production&quot;</span>
</span><span data-line="22"><span style="color:#24292EFF;">      </span><span style="color:#C2C3C5;"># FORCE_RENEW: 'true'</span>
</span><span data-line="23"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">WEBSOCKET</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;true&quot;</span>
</span><span data-line="24"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="25"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">https-portal-data:/var/lib/https-portal</span>
</span><span data-line="26">
</span><span data-line="27"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">uptime-kuma-kevinjiang-ca</span><span style="color:#D32F2F;">:</span>
</span><span data-line="28"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">image</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">louislam/uptime-kuma:1</span>
</span><span data-line="29"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">container_name</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">uptime-kuma-kevinjiang-ca</span>
</span><span data-line="30"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="31"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">./uptime-kuma-kevinjiang-ca:/app/data</span>
</span><span data-line="32"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">ports</span><span style="color:#D32F2F;">:</span>
</span><span data-line="33"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">3001:3001</span>
</span><span data-line="34">
</span><span data-line="35"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">uptime-kuma-k-j-ca</span><span style="color:#D32F2F;">:</span>
</span><span data-line="36"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">image</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">louislam/uptime-kuma:1</span>
</span><span data-line="37"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">container_name</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">uptime-kuma-k-j-ca</span>
</span><span data-line="38"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="39"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">./uptime-kuma-k-j-ca:/app/data</span>
</span><span data-line="40"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">ports</span><span style="color:#D32F2F;">:</span>
</span><span data-line="41"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">3002:3001</span>
</span><span data-line="42">
</span><span data-line="43"><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="44"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">https-portal-data</span><span style="color:#D32F2F;">:</span>
</span></code></pre>]]></content>
    <rights>© 2023 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://kevinjiang.ca/til/dnssec3-hashing-and-cracking/
    </id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/dnssec3-hashing-and-cracking/"/>
    <published>2023-10-30T00:47:32.000-04:00</published>
    <updated>2023-10-30T05:28:33.000+00:00</updated>
    <title>DNSSEC3 Hashing, and Cracking</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <category term="domains"/>
    <content type="html"><![CDATA[<p>
  So I’ve been on a journey to make a niche domain search tool, similar to <a href="http://micro.domains" target="_blank">micro.domains</a>. I thought a key competitive advantage would be the ability to quickly query which domains exist and which ones don’t, without having to send out a bunch of whois requests. (This was the original motivation but this entire post is a rabbit-hole down DNSSEC).
</p>
<p>
  DNSSEC and DNSSEC3 are additional standards to reduce the availability of publically available DNS data, in the name of security through obscurity. Sure, if you apply it on your own corporate subdomain it’s still understandable, but it also applies to “full domains” as well (e.g. google.com). Which means, even if I have the zone files from CZDS, I can’t enumerate all the domain names for… reasons?
</p>
<p>
  For DNSSEC, it’s trivial to enumerate everything. For example, let’s say everything under .ca was encrypted using DNSSEC, and I wanted to find all the domains. I would simply be able to ask for <code>a.ca</code>, then if that domain doesn’t exist, it’ll tell me the next and previous domains registered. I can then just follow these “pointers”, until I have everything under the TLD. Fun days.
</p>
<p>
  However, DNSSEC3 removes some of that fun by making it so that it gives you ranges of hashes where a domain doesn’t exist. No fun pointers to follow anymore :(.
</p>
<p>
  So then how do you enumerate? Now it’s no longer guaranteed, but you can get decently close, roughly 79% <a href="#fn:a" id="fn:a.ref1" data-footnote-ref aria-label="note"><sup>1</sup></a>.
</p>
<p>
  One way is to use GPU-based Hash Breaking<a href="#fn:b" id="fn:b.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>. From this 2014 paper, it seems to suggest that all the domains use SHA-1, and each TLD uses a constant salt for all their domains. I’m not sure if it’s the case, but I wonder if you could find the salt and brute force everything still?
</p>
<p>
  In a paper from 2017<a href="#fn:a" id="fn:a.ref2" data-footnote-ref aria-label="note"><sup>1</sup></a>, it seems like they did a brute force using relatively older GPUs (7 graphics cards from 2011 to 2016) and got the 79% previously mentioned in 2 weeks. Given that I have a 3090, I assume this is way easier to do, and I’ll have to look for implementations.
</p>
<p>
  References:
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn:a">
      <p>
        <a href="https://ieeexplore.ieee.org/document/8002913" target="_blank">https://ieeexplore.ieee.org/document/8002913</a>
      </p>
      <a href="#fn:a.ref1" data-footnote-backref aria-label="return">↩</a><a href="#fn:a.ref2" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn:b">
      <p>
        <a href="https://ieeexplore.ieee.org/document/6924218" target="_blank">https://ieeexplore.ieee.org/document/6924218</a>
      </p>
      <a href="#fn:b.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2023 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://kevinjiang.ca/til/i-made-a-til/</id>
    <link rel="alternate" type="text/html" href="https://kevinjiang.ca/til/i-made-a-til/"/>
    <published>2023-10-29T01:59:51.000-04:00</published>
    <updated>2023-10-29T06:02:48.000+00:00</updated>
    <title>I made a TIL</title>
    <author>
      <name>Kevin Jiang</name>
      <uri>https://kevinjiang.ca</uri>
    </author>
    <content type="html"><![CDATA[<p>
  After months of lusting after my own microblogging site for posting random TILs, now I have one! I hope that this will be a way to make the constant rabbit holes I go down at least somewhat productive, even if only for other people.
</p>
<p>
  I’m taking <a href="https://github.com/leebyron/til" target="_blank">Lee Byron’s template</a>, which is great for me because it’s not overly complex, and relies upon JS rather than Python.
</p>
<p>
  I hope to actually post at last a few sentences daily from now on. Cheers!
</p>]]></content>
    <rights>© 2023 Kevin Jiang ⸱ licensed under CC BY 4.0</rights>
  </entry>
</feed>